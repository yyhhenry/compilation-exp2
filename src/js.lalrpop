use crate::ast::*;
use lalrpop_util::ErrorRecovery;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

match {
    "{",
    "}",
    "(",
    ")",
    "[",
    "]",
    "=",
    ",",
    ":",
    ";",
    "?",
    "!",
    "+",
    "-",
    "*",
    "/",
    "%",
    "&&",
    "||",
    "??",
    "==",
    "!=",
    "===",
    "!==",
    "<",
    "<=",
    ">",
    ">=",
    "in",
    "instanceof",
    ".",
    "new",
    "function",
    "async",
    "await",
    "return",
    "break",
    "continue",
    "let",
    "const",
    "if",
    "else",
    "while",
    "true",
    "false",
    "null",
    "undefined",
    r#""([^"]|\\")*""#,
    r"[0-9]+(.[0-9]+)?",
    r"[a-zA-Z_][a-zA-Z0-9_]*",
    
    // Ignore whitespace and comments
    r"\s+" => {},
    r"//[^\n]*" => {},
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },
}

pub JavaScript: JavaScript = {
    <r:StmtList> => JavaScript { body: r },
}

StmtList: StmtList = {
    <list:StmtList> <stmt:Stmt> => {
        let mut stmts = list.0;
        stmts.push(stmt);
        StmtList(stmts)
    },
    => StmtList(vec![])
}

Block: Stmt = {
    "{" <list:StmtList> "}" => Stmt::Block(list),
}

Stmt: Stmt = {
    ";" => Stmt::Empty,
    "if" <cond:Expr> <then:Block> "else" <r#else:Block> => Stmt::If {
        cond,
        then: Box::new(then),
        r#else: Some(Box::new(r#else)),
    },
    "if" <cond:Expr> <then:Block> => Stmt::If {
        cond,
        then: Box::new(then),
        r#else: None,
    },
    "while" <cond:Expr> <body:Block> => Stmt::While{
        cond,
        body: Box::new(body),
    },
    <block:Block> => block,
    "let" <list:LetList> ";" => Stmt::Let(list),
    "const" <list:ConstList> ";" => Stmt::Const(list),
    "function" <name:Ident> "(" <params:IdentListOpt> ")" <body:Block> => Stmt::Function {
        r#async: false,
        name,
        params,
        body: Box::new(body),
    },
    "async" "function" <name:Ident> "(" <params:IdentListOpt> ")" <body:Block> => Stmt::Function {
        r#async: true,
        name,
        params,
        body: Box::new(body),
    },
    "return" <expr:ExplicitExpr> ";" => Stmt::Return(expr),
    "return" ";" => Stmt::Return(Expr::Literal(Literal::Undefined)),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
    <expr:Expr> ";" => Stmt::Expr(expr),
    
    // Error Recovery
    Expr <r:!> => { errors.push(r); Stmt::Error },
}

/// ExplicitExpr is used to avoid ambiguity with comma operator
/// Only after `return`, or wrapped with `()`
ExplicitExpr: Expr = {
    <exprs:ExprList> => if exprs.len() == 1 {
        let mut exprs = exprs;
        exprs.remove(0)
    } else {
        Expr::Comma(exprs)
    },
}

ExprOrObject: Expr = {
    <obj:Object> => Expr::Literal(obj),
    <expr:Expr> => expr,
}

Expr: Expr = {
    <a:EqExpr> => a,
    ! => { errors.push(<>); Expr::Error }
}

EqExpr: Expr = {
    <a:FactorR> "=" <b:EqExpr> => Expr::BinOp(BinOp::Eq, Box::new(a), Box::new(b)),
    <a:CondExpr> => a,
}

CondExpr: Expr = {
    <cond:AwaitExpr> "?" <then:CondExpr> ":" <r#else:CondExpr> => Expr::Cond { cond: Box::new(cond), then: Box::new(then), r#else: Box::new(r#else) },
    <cond:AwaitExpr> => cond,
}

AwaitExpr: Expr = {
    "await" <a:UnwrapOrExpr> => Expr::Await(Box::new(a)),
    <a:UnwrapOrExpr> => a,
}

UnwrapOrExpr: Expr = {
    <a:OrExpr> "??" <b:UnwrapOrExpr> => Expr::BinOp(BinOp::UnwrapOr, Box::new(a), Box::new(b)),
    <a:OrExpr> => a,
}

OrExpr: Expr = {
    <a:OrExpr> "||" <b:AndExpr> => Expr::BinOp(BinOp::Or, Box::new(a), Box::new(b)),
    <a:AndExpr> => a,
}

AndExpr: Expr = {
    <a:AndExpr> "&&" <b:OrdExpr> => Expr::BinOp(BinOp::And, Box::new(a), Box::new(b)),
    <a:OrdExpr> => a,
}

OrdExpr: Expr = {
    <a:OrdExpr> "==" <b:SumExpr> => Expr::BinOp(BinOp::Eq, Box::new(a), Box::new(b)),
    <a:OrdExpr> "!=" <b:SumExpr> => Expr::BinOp(BinOp::Ne, Box::new(a), Box::new(b)),
    <a:OrdExpr> "===" <b:SumExpr> => Expr::BinOp(BinOp::StrictEq, Box::new(a), Box::new(b)),
    <a:OrdExpr> "!==" <b:SumExpr> => Expr::BinOp(BinOp::StrictNe, Box::new(a), Box::new(b)),
    <a:OrdExpr> "<" <b:SumExpr> => Expr::BinOp(BinOp::Lt, Box::new(a), Box::new(b)),
    <a:OrdExpr> "<=" <b:SumExpr> => Expr::BinOp(BinOp::Le, Box::new(a), Box::new(b)),
    <a:OrdExpr> ">" <b:SumExpr> => Expr::BinOp(BinOp::Gt, Box::new(a), Box::new(b)),
    <a:OrdExpr> ">=" <b:SumExpr> => Expr::BinOp(BinOp::Ge, Box::new(a), Box::new(b)),
    <a:OrdExpr> "in" <b:SumExpr> => Expr::BinOp(BinOp::In, Box::new(a), Box::new(b)),
    <a:OrdExpr> "instanceof" <b:SumExpr> => Expr::BinOp(BinOp::InstanceOf, Box::new(a), Box::new(b)),
    <a:SumExpr> => a,
}

SumExpr: Expr = {
    <a:SumExpr> "+" <b:Term> => Expr::BinOp(BinOp::Add, Box::new(a), Box::new(b)),
    <a:SumExpr> "-" <b:Term> => Expr::BinOp(BinOp::Sub, Box::new(a), Box::new(b)),
    <a:Term> => a,
}

Term: Expr = {
    <a:Term> "*" <b:Factor> => Expr::BinOp(BinOp::Mul, Box::new(a), Box::new(b)),
    <a:Term> "/" <b:Factor> => Expr::BinOp(BinOp::Div, Box::new(a), Box::new(b)),
    <a:Term> "%" <b:Factor> => Expr::BinOp(BinOp::Mod, Box::new(a), Box::new(b)),
    <a:Factor> => a,
}

Factor: Expr = {
    "-" <expr:Factor> => Expr::UnOp(UnOp::Neg, Box::new(expr)),
    "+" <expr:Factor> => Expr::UnOp(UnOp::Pos, Box::new(expr)),
    "!" <expr:Factor> => Expr::UnOp(UnOp::Not, Box::new(expr)),
    <expr:FactorR> => expr,
}

FactorR: Expr = {
    <expr:FactorR> "[" <idx:Expr> "]" => Expr::BinOp(BinOp::Idx, Box::new(expr), Box::new(idx)),
    <expr:FactorR> "." <idx:Ident> => Expr::BinOp(BinOp::Idx, Box::new(expr), Box::new(Expr::Literal(Literal::String(idx)))),
    <func:FactorR> "(" <args:ExprListOpt> ")" => Expr::Call {
        func: Box::new(func),
        args,
    },
    <expr:FactorNew> => expr,
}

FactorNew: Expr = {
    "new" <func:FactorNew> "(" <args:ExprListOpt> ")" => Expr::New {
        func: Box::new(func),
        args,
    },
    <expr:ExprElem> => expr,
}

ExprElem: Expr = {
    <a:Literal> => Expr::Literal(a),
    <a:Ident> => Expr::Ident(a),
    "(" <expr:ExplicitExpr> ")" => expr,
}

Literal: Literal = {
    r"[0-9]+(.[0-9]+)?" => (<>).parse().map_or(Literal::Error, Literal::Number),
    r#""([^"]|\\")*""# => serde_json::from_str(<>).map_or(Literal::Error, Literal::String),
    "true" => Literal::Boolean(true),
    "false" => Literal::Boolean(false),
    "null" => Literal::Null,
    "undefined" => Literal::Undefined,
    "[" <list:ExprListOpt> "]" => Literal::Array(list),
}

Ident: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string(),
}

IdentListOpt: Vec<String> = {
    <list:IdentList> => list,
    => vec![],
}

IdentList: Vec<String> = {
    <list:IdentList> "," <ident:Ident> => {
        let mut idents = list;
        idents.push(ident);
        idents
    },
    <ident:Ident> => vec![ident],
}

ExprListOpt: Vec<Expr> = {
    <list:ExprList> => list,
    => vec![],
}

ExprList: Vec<Expr> = {
    <list:ExprList> "," <expr:ExprOrObject> => {
        let mut exprs = list;
        exprs.push(expr);
        exprs
    },
    <expr:ExprOrObject> => vec![expr],
}

KVListOpt: Vec<(String, Expr)> = {
    <list:KVList> => list,
    => vec![],
}

/// Object literal
/// To avoid ambiguity with block,
/// put it after `return` or `=`,
/// or wrap it with `()`
Object: Literal = {
    "{" <list:KVListOpt> "}" => k_v_list_to_object(list),
}

KVList: Vec<(String, Expr)> = {
    <list:KVList> "," <key:Ident> ":" <value:ExprOrObject> => {
        let mut kvs = list;
        kvs.push((key, value));
        kvs
    },
    <key:Ident> ":" <value:ExprOrObject> => vec![(key, value)],
}

LetList: Vec<Init> = {
    <list:LetList> "," <elem:LetElem> => {
        let mut elems = list;
        elems.push(elem);
        elems
    },
    <elem:LetElem> => vec![elem],
}

LetElem: Init = {
    <name:Ident> "=" <value:ExprOrObject> => Init { name, value },
    <name:Ident> => Init { name, value: Expr::Literal(Literal::Undefined) },
}

ConstList: Vec<Init> = {
    <list:ConstList> "," <elem:ConstElem> => {
        let mut elems = list;
        elems.push(elem);
        elems
    },
    <elem:ConstElem> => vec![elem],
}

ConstElem: Init = {
    <name:Ident> "=" <value:ExprOrObject> => Init { name, value },
    <name:Ident> => Init { name, value: Expr::Literal(Literal::Undefined) },
}
